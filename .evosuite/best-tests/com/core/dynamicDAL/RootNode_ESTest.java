/*
 * This file was automatically generated by EvoSuite
 * Fri Jun 28 11:27:43 GMT 2024
 */

package com.dilizity.dynamicDAL;

import org.junit.Test;
import static org.junit.Assert.*;
import static org.evosuite.runtime.EvoAssertions.*;
import com.dilizity.dynamicDAL.RootNode;
import com.dilizity.dynamicDAL.Schema;
import java.util.concurrent.ConcurrentHashMap;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class RootNode_ESTest extends RootNode_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      ConcurrentHashMap<String, Schema> concurrentHashMap0 = new ConcurrentHashMap<String, Schema>();
      rootNode0.setSchemaMap(concurrentHashMap0);
      ConcurrentHashMap<String, Schema> concurrentHashMap1 = rootNode0.getSchemaMap();
      assertSame(concurrentHashMap1, concurrentHashMap0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      ConcurrentHashMap<String, Schema> concurrentHashMap0 = new ConcurrentHashMap<String, Schema>();
      rootNode0.setSchemaMap(concurrentHashMap0);
      Schema schema0 = new Schema();
      concurrentHashMap0.put("Expected insertions (%s) must be >= 0", schema0);
      ConcurrentHashMap<String, Schema> concurrentHashMap1 = rootNode0.getSchemaMap();
      assertFalse(concurrentHashMap1.isEmpty());
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      ConcurrentHashMap<String, Schema> concurrentHashMap0 = new ConcurrentHashMap<String, Schema>();
      rootNode0.setSchemaMap(concurrentHashMap0);
      Schema schema0 = rootNode0.getSchema("com.google.common.base.Predicates");
      assertNull(schema0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      ConcurrentHashMap<String, Schema> concurrentHashMap0 = new ConcurrentHashMap<String, Schema>();
      rootNode0.setSchemaMap(concurrentHashMap0);
      Schema schema0 = new Schema();
      concurrentHashMap0.put("Expected insertions (%s) must be >= 0", schema0);
      Schema schema1 = rootNode0.getSchema("Expected insertions (%s) must be >= 0");
      assertNull(schema1.getName());
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      ConcurrentHashMap<String, Schema> concurrentHashMap0 = rootNode0.getSchemaMap();
      assertNull(concurrentHashMap0);
  }

  @Test(timeout = 4000)
  public void test5()  throws Throwable  {
      RootNode rootNode0 = new RootNode();
      // Undeclared exception!
      try { 
        rootNode0.getSchema("A]U*Hy%6+(E=");
        fail("Expecting exception: NullPointerException");
      
      } catch(NullPointerException e) {
         //
         // no message in exception (getMessage() returned null)
         //
         verifyException("com.core.dynamicDAL.RootNode", e);
      }
  }
}
